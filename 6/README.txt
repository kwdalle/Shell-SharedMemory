I will start this explanation with the header file for the structure. In this structure I have a flag for whether the file had been uploaded or not. Next I had a variable for the size of the file that was uploaded into the shared memory. Lastly I have an array of size 10000 for the data in the files that are being read. I do not know if this is enough, but it was able to copy the /bin/ls file perfectly. Now I will talk about the code for the uploader (or producer). Most of this code is the same as the example code that we typed out for an earlier part of this project. The changes are that the name is different, and the size has been changed. The major differences however are that it takes input from the user to get the name of the file that is suppose to uploaded into the shared memory. Also, we are using the struct that was discussed at the beginning of this document. That structure is what is mapped to the shared memory in this program. The library sys/stat is used to get information about the file (the size). Data is then read directly into the array of the structure and the flag is set to either 0 or 1 depending on if it succeeded. At the end of the program I close the file and return. Lastly is the downloader (or consumer). For the beginning of this program it is pretty similar to the example done earlier. The main difference is that we are taking the data from the array in the struct (located in shared memory) and writing it to a file (./download.txt). It only does this if the flag is 1, otherwise it says that there was no file to download. If the printing fails it also says that. Lastly I unlink the shared memory and return.
